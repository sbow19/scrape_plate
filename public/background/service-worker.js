(()=>{"use strict";class e{static openDB(){return new Promise(((t,r)=>{const a=indexedDB.open("scrape_plate");a.onupgradeneeded=r=>{const o=a.result??null;if(!o)throw new Error("DB could not be updated");o.createObjectStore("details",{autoIncrement:!0}),o.createObjectStore("projects",{keyPath:"id"}),o.createObjectStore("schemas",{keyPath:"id"}),o.createObjectStore("schemaMatches",{autoIncrement:!0}),t(e._DBOperationResultFactory(!0,"create","other",null))},a.onsuccess=t=>{e._db=a.result,e._db.transaction(["details"],"readwrite").objectStore("details").add({hasUsedOnce:!1,last_used:"",username:"",currentProject:"",updateRequired:!1}).onsuccess=()=>{}},a.onerror=t=>{r(e._DBOperationResultFactory(!1,"create","other",null))}}))}static handleQuery(t){return new Promise((async(r,a)=>{e._db||await e.openDB();const{method:o,type:c,data:s}=t;switch(o){case"read":e._read(c).then((e=>{r(e)})).catch((e=>{a(e)}));break;case"create":["schema","project","capture"].includes(c)||a(e._DBOperationResultFactory(!1,"create",c,"Invalid data type")),e._create(c,s).then((e=>{r(e)})).catch((e=>{a(e)}));break;case"delete":["schema","project","capture","schemaEntry"].includes(c)||a(e._DBOperationResultFactory(!1,"delete",c,"Invalid data type")),e._delete(c,s).then((e=>{r(e)})).catch((e=>{a(e)}));break;case"update":["schema","project","capture","details","schemaMatches"].includes(c)||a(e._DBOperationResultFactory(!1,"update",c,"Invalid data type")),e._update(c,s).then((e=>{r(e)})).catch((e=>{a(e)}));break;default:a(e._DBOperationResultFactory(!1,"update","other","Invalid DB method"))}}))}static _read(t){return new Promise(((r,a)=>{switch(t){case"all":let o={details:{},projects:{},schemas:{}};const c=e._db?.transaction(["details","projects","schemas"]),s=c?.objectStore("details")??null,n=c?.objectStore("projects")??null,d=c?.objectStore("schemas")??null;if(!s||!n||!d)return void a(e._DBOperationResultFactory(!1,"read","all","Object stores could not be fetched"));const i=s.getAll();i.onsuccess=e=>{const t=e.target,[r]=t.result;o.details={...r}},i.onerror=t=>{const r=t.target;a(e._DBOperationResultFactory(!1,"read","all",r.error)),c?.abort()};const u=n.getAll();u.onsuccess=e=>{const t=e.target.result;for(let e of t)o.projects[e.id]=e},u.onerror=t=>{const r=t.target;a(e._DBOperationResultFactory(!1,"read","all",r.error)),c?.abort()};const l=d.getAll();l.onsuccess=e=>{const t=e.target.result;for(let e of t)o.schemas[e.id]=e},l.onerror=t=>{const r=t.target;a(e._DBOperationResultFactory(!1,"read","all",r.error)),c?.abort()},c.oncomplete=()=>{r(e._DBOperationResultFactory(!0,"read","all",null,o))};break;case"schema":{let t=e._db?.transaction(["schemas"]),o=t?.objectStore("schemas"),c=o?.getAll();c.onsuccess=a=>{const o=a.target.result,c={};for(let e of o)c[e.id]=e;r(e._DBOperationResultFactory(!0,"read","schema",null,c)),t?.commit()},c.onerror=r=>{const o=r.target;a(e._DBOperationResultFactory(!1,"read","schema",o.error)),t?.abort()}}break;case"schemaMatches":{const t=e._db?.transaction(["schemaMatches"]),o=t?.objectStore("schemaMatches"),c=o?.getAll();c.onsuccess=a=>{const o=a.target.result[0];r(e._DBOperationResultFactory(!0,"read","schemaMatches",null,o)),t?.commit()},c.onerror=r=>{const o=r.target;a(e._DBOperationResultFactory(!1,"read","schemaMatches",o.error)),t?.abort()}}break;default:a(e._DBOperationResultFactory(!1,"read",t,"Invalid data type"))}}))}static _create(t,r){return new Promise(((a,o)=>{switch(t){case"project":{const t=r,c=e._db?.transaction(["projects"],"readwrite"),s=c?.objectStore("projects").add(t);if(!s)return o(e._DBOperationResultFactory(!1,"create","project","Create project request failed")),void c?.abort();s.onsuccess=t=>{a(e._DBOperationResultFactory(!0,"create","project",null)),c?.commit()},s.onerror=t=>{const r=t.target;o(e._DBOperationResultFactory(!1,"create","project",r.error)),c?.abort()}}break;case"capture":{const t=r,c=e._db?.transaction(["projects"],"readwrite"),s=c?.objectStore("projects");if(!s)return o(e._DBOperationResultFactory(!1,"create","capture","Get operation on projects store failed")),void c?.abort();const n=s.get(t.project_id);if(!n)return o(e._DBOperationResultFactory(!1,"create","capture","Get operation on projects store failed")),void c?.abort();n.onsuccess=r=>{const n=r.target.result;if(Object.keys(n.captures).includes(t.id))return o(e._DBOperationResultFactory(!1,"create","capture","Capture id already exists")),void c?.abort();n.captures[t.id]=t;const d=s.put(n);d.onerror=t=>{const r=t.target;o(e._DBOperationResultFactory(!1,"create","capture",r.error)),c?.abort()},d.onsuccess=t=>{a(e._DBOperationResultFactory(!0,"create","capture",null)),c?.commit()}},n.onerror=t=>{const r=t.target;o(e._DBOperationResultFactory(!1,"create","capture",r.error)),c?.abort()}}break;case"schema":{const t=r,c=e._db?.transaction(["schemas"],"readwrite"),s=c?.objectStore("schemas").add(t);if(!s)return o(e._DBOperationResultFactory(!1,"create","schema","Create schema request failed")),void c?.abort();s.onsuccess=t=>{a(e._DBOperationResultFactory(!0,"create","schema",null)),c?.commit()},s.onerror=t=>{const r=t.target;o(e._DBOperationResultFactory(!1,"create","schema",r.error)),c?.abort()}}break;default:o(e._DBOperationResultFactory(!1,"create",t,"Invalid data type"))}}))}static _update(t,r){return new Promise(((a,o)=>{switch(t){case"project":{const t=r,c=e._db?.transaction(["projects"],"readwrite"),s=c?.objectStore("projects");if(!s)return void o(e._DBOperationResultFactory(!1,"update","project","Object stores could not be fetched"));const n=s.put(t);n.onsuccess=t=>{a(e._DBOperationResultFactory(!0,"update","project",null)),c?.commit()},n.onerror=t=>{const r=t.target;o(e._DBOperationResultFactory(!1,"update","project",r.error)),c?.abort()}}break;case"capture":{const t=r,c=e._db?.transaction(["projects"],"readwrite"),s=c?.objectStore("projects");if(!s)return o(e._DBOperationResultFactory(!1,"update","capture","Get operation on projects store failed")),void c?.abort();const n=s.get(t.project_id);if(!n)return o(e._DBOperationResultFactory(!1,"update","capture","Get operation on projects store failed")),void c?.abort();n.onsuccess=r=>{const n=r.target.result;if(!Object.keys(n.captures).includes(t.id))return o(e._DBOperationResultFactory(!1,"update","capture","Capture id does not exist")),void c?.abort();n.captures[t.id]=t;const d=s.put(n);d.onerror=t=>{const r=t.target;o(e._DBOperationResultFactory(!1,"update","capture",r.error)),c?.abort()},d.onsuccess=t=>{a(e._DBOperationResultFactory(!0,"update","capture",null)),c?.commit()}},n.onerror=t=>{const r=t.target;o(e._DBOperationResultFactory(!1,"update","capture",r.error)),c?.abort()}}break;case"schema":{const t=r,c=e._db?.transaction(["schemas"],"readwrite"),s=c?.objectStore("schemas");if(!s)return void o(e._DBOperationResultFactory(!1,"update","schema","Object stores could not be fetched"));const n=s.put(t);n.onsuccess=t=>{a(e._DBOperationResultFactory(!0,"update","schema",null)),c?.commit()},n.onerror=t=>{const r=t.target;o(e._DBOperationResultFactory(!1,"update","schema",r.error)),c?.abort()}}break;case"details":{const t=r,c=e._db?.transaction(["details"],"readwrite"),s=c?.objectStore("details");if(!s)return void o(e._DBOperationResultFactory(!1,"update","details","Object stores could not be fetched"));const n=s.put(t,1);n.onsuccess=t=>{a(e._DBOperationResultFactory(!0,"update","details",null)),c?.commit()},n.onerror=t=>{const r=t.target;o(e._DBOperationResultFactory(!1,"update","details",r.error)),c?.abort()}}break;case"schemaMatches":{const t=e._db?.transaction(["schemaMatches"],"readwrite"),c=t?.objectStore("schemaMatches"),s=c?.put(r,1);s.onsuccess=r=>{a(e._DBOperationResultFactory(!0,"update","schemaMatches",null)),t?.commit()},s.onerror=r=>{const a=r.target;o(e._DBOperationResultFactory(!1,"update","schemaMatches",a.error)),t?.abort()}}break;default:o(e._DBOperationResultFactory(!1,"update",t,"Invalid data type"))}}))}static _delete(t,r){return new Promise(((a,o)=>{switch(t){case"project":{const t=r,c=e._db?.transaction(["projects"],"readwrite"),s=c?.objectStore("projects").delete(t);if(!s)return o(e._DBOperationResultFactory(!1,"delete","project","Delete project request failed")),void c?.abort();s.onsuccess=t=>{a(e._DBOperationResultFactory(!0,"delete","project",null)),c?.commit()},s.onerror=t=>{const r=t.target;o(e._DBOperationResultFactory(!1,"delete","project",r.error)),c?.abort()}}break;case"capture":{const t=r,c=e._db?.transaction(["projects"],"readwrite"),s=c?.objectStore("projects");if(!s)return o(e._DBOperationResultFactory(!1,"delete","capture","Get operation on projects store failed")),void c?.abort();const n=s.get(t.project_id);if(!n)return o(e._DBOperationResultFactory(!1,"delete","capture","Get operation on projects store failed")),void c?.abort();n.onsuccess=r=>{const n=r.target.result;if(!Object.keys(n.captures).includes(t.id))return o(e._DBOperationResultFactory(!1,"delete","capture","Capture id does not exist")),void c?.abort();delete n.captures[t.id];const d=s.put(n);d.onerror=t=>{const r=t.target;o(e._DBOperationResultFactory(!1,"delete","capture",r.error)),c?.abort()},d.onsuccess=t=>{a(e._DBOperationResultFactory(!0,"delete","capture",null)),c?.commit()}},n.onerror=t=>{const r=t.target;o(e._DBOperationResultFactory(!1,"delete","capture",r.error)),c?.abort()}}break;case"schema":{const t=r,c=e._db?.transaction(["schemas"],"readwrite"),s=c?.objectStore("schemas").delete(t);if(!s)return o(e._DBOperationResultFactory(!1,"delete","schema","Delete schema request failed")),void c?.abort();s.onsuccess=t=>{a(e._DBOperationResultFactory(!0,"delete","schema",null)),c?.commit()},s.onerror=t=>{const r=t.target;o(e._DBOperationResultFactory(!1,"delete","schema",r.error)),c?.abort()}}break;case"schemaEntry":{const t=r,c=e._db?.transaction(["schemas"],"readwrite");console.log(t);const s=c?.objectStore("schemas");if(!s)return o(e._DBOperationResultFactory(!1,"delete","schemaEntry","Get operation on schemas store failed")),void c?.abort();const n=s.get(t.schema_id);if(!n)return o(e._DBOperationResultFactory(!1,"delete","schemaEntry","Get operation on schemas store failed")),void c?.abort();n.onsuccess=r=>{const n=r.target.result;if(!Object.keys(n.schema).includes(t.id))return o(e._DBOperationResultFactory(!1,"delete","schemaEntry","SchemaEntry id does not exist")),void c?.abort();delete n.schema[t.id];const d=s.put(n);d.onerror=t=>{const r=t.target;o(e._DBOperationResultFactory(!1,"delete","schemaEntry",r.error)),c?.abort()},d.onsuccess=t=>{a(e._DBOperationResultFactory(!0,"delete","schemaEntry",null)),c?.commit()}},n.onerror=t=>{const r=t.target;o(e._DBOperationResultFactory(!1,"delete","schemaEntry",r.error)),c?.abort()}}break;default:o(e._DBOperationResultFactory(!1,"delete",t,"Invalid data type"))}}))}static _DBOperationResultFactory(e,t,r,a=null,o){return{success:e,method:t,type:r,message:a,data:o??null}}}Object.defineProperty(e,"_db",{enumerable:!0,configurable:!0,writable:!0,value:null});const t=e;function r(e,t){const r={};if("database"===e.operation){r.operation="database";const e=t;r.data={type:e.type,method:e.method,success:e.success,payload:e?.data??null,message:e.message}}else if("getCurrentTab"===e.operation){r.operation;const e=t;r.data=e}return r}function a(){return new Promise((async e=>{chrome.tabs.query({active:!0}).then((([t])=>{e(t)}))}))}function o(e,t){const r=Object.values(e);if(0===r.length)return[];if(!t)return[];let a=[];for(let e of r)t.includes(e.url_match)&&a.push(e);return a}chrome.runtime.onInstalled.addListener((()=>{t.openDB().then((e=>{})).catch((e=>{}))})),chrome.runtime.onMessage.addListener(((e,a,o)=>("database"===e.operation&&t.handleQuery(e.data).then((t=>{const a=r(e,t);o(a)})).catch((t=>{const a=r(e,t);o(a)})),!0))),chrome.tabs.onActivated.addListener((()=>{chrome.sidePanel.setOptions({enabled:!1}),chrome.sidePanel.setOptions({enabled:!0})})),chrome.tabs.onUpdated.addListener((()=>{chrome.sidePanel.setOptions({enabled:!1}),chrome.sidePanel.setOptions({enabled:!0})})),chrome.tabs.onActivated.addListener((()=>{let e=null;a().then((r=>{if(r)return e=r,t.handleQuery({method:"read",type:"schema"})})).then((r=>{if(!r?.success||!e)return;const a=o(r.data,e.url);return 0===a.length?chrome.action.setBadgeText({tabId:e.id,text:""}):a.length>0&&(chrome.action.setBadgeText({tabId:e.id,text:"Hit"}),chrome.action.setBadgeBackgroundColor({tabId:e.id,color:"#0F0"}),chrome.contextMenus.create({title:"View/edit schema",contexts:["page"],id:"edit_schema"}),chrome.contextMenus.create({title:"Capture page",contexts:["page"],id:"edit_capture"})),t.handleQuery({method:"update",type:"schemaMatches",data:a})})).catch((e=>{console.log(e,"On activated schema checks")}))})),chrome.tabs.onUpdated.addListener((e=>{let r=null;a().then((a=>{if(console.log(a),a&&(r=a,r.id===e))return t.handleQuery({method:"read",type:"schema"})})).then((e=>{if(!e?.success||!r)return;const a=o(e.data,r.url);return 0===a.length?chrome.action.setBadgeText({tabId:r.id,text:""}):a.length>0&&(chrome.action.setBadgeText({tabId:r.id,text:"Hit"}),chrome.action.setBadgeBackgroundColor({tabId:r.id,color:"#0F0"})),t.handleQuery({method:"update",type:"schemaMatches",data:a})})).catch((e=>{console.log(e)}))})),chrome.tabs.onActivated.addListener((()=>{chrome.contextMenus.create({title:"Create schema",contexts:["page"],id:"create_schema"})})),chrome.contextMenus.onClicked.addListener(((e,r)=>{switch(e.menuItemId){case"create_schema":chrome.sidePanel.open({tabId:r.id},(()=>{const e={operation:"openSidePanel",data:{method:"create_schema",schema:{name:"",id:"",url_match:r.url,schema:{}}}};chrome.runtime.sendMessage(e)}));break;case"edit_schema":t.handleQuery({type:"schemaMatches",method:"read"}).then((e=>{chrome.sidePanel.open({tabId:r.id},(()=>{const t={operation:"openSidePanel",data:{method:"edit_schema",schema:e.data.schemaMatches}};chrome.runtime.sendMessage(t)}))}));break;case"capture_body":t.handleQuery({type:"schemaMatches",method:"read"}).then((e=>{chrome.sidePanel.open({tabId:r.id},(()=>{const t={operation:"openSidePanel",data:{method:"edit_capture",schema:e.data.schemaMatches}};chrome.runtime.sendMessage(t)}))}))}})),chrome.runtime.onMessage.addListener(((e,t,o)=>{if("getCurrentTab"===e.operation)return a().then((t=>{const a=r(e,t);o(a)})).catch((()=>{})),!0})),chrome.commands.onCommand.addListener(((e,t)=>{switch(e){case"create_schema":chrome.sidePanel.open({tabId:t?.id??0},(()=>{const e={operation:"openSidePanel",data:{method:"create_schema",schema:null,tab:t}};setTimeout((()=>{chrome.runtime.sendMessage(e)}),100)}));break;case"edit_capture":case"edit_schema":chrome.sidePanel.open({tabId:t?.id??0})}}))})();